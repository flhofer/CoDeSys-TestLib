

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM TestTTCon4
VAR_OUTPUT
	Pass: BOOL;
END_VAR
VAR CONSTANT
	NoOfTests : USINT := 1;
	NoOfInputs: USINT := 5;

	(* ------------ Test input ----------- *)
	(* By setting _delayIsTime to false, base time element is running cycles *)
	(* These are constants. You can also declare normal vars in case of in_out parameters *)
	(* the memory footpint will not change *)

	Tests_Values : ARRAY [1..NoOfTests,1..NoOfInputs] OF Test4_Vars :=

				(* Test 1 *)
				(testtime:= 100, voltage := S_MIN_BATTERY_VOLTAGE_n1, error := S_ERROR_NO_ERROR),
				(testtime:= 1, voltage := S_MIN_BATTERY_VOLTAGE, error := S_ERROR_NO_ERROR),
				(testtime:= 199, voltage := S_MIN_BATTERY_VOLTAGE_n1, error := S_ERROR_NO_ERROR),
				(testtime:= 1, voltage := S_MIN_BATTERY_VOLTAGE_n1, error := S_ERROR_BATTERY),
				(testtime:= 300, voltage := S_MIN_BATTERY_VOLTAGE, error := S_ERROR_BATTERY);
END_VAR
VAR
	(* Working variables *)
	fb_s_battery	: s_battery;
	(* Internal used inputs for calls *)
	ptTestVars 		: POINTER TO Test4_Vars;
END_VAR
(* @END_DECLARATION := '0' *)
(* With this tests we use execution counters as time unit *)

testInit ('Dir_TEST', NoOfTests);

CASE _tls_ OF
	sT_INIT : (* Reset *)
				(* could also be a memory reset of the instance *)
				SysMemSet (ADR(fb_s_battery), 0, SIZEOF(fb_s_battery));
				testParam(pSteps, SIZEOF(Tests_Values)/NoOfTests/SIZEOF(Tests_Values[_tlt_,1]));
				testParam(pWTIME, 5);

	sT_RUN:		(* test run *)
				ptTestVars := ADR(Tests_Values[_tlt_,_tlp_]);
				fb_s_battery(
					voltage:= ptTestVars^.voltage,
					execution_counter:= g_execution_counter
				);

				assertEqualsD (	Value1 := fb_s_battery.error,
								Value2 := ptTestVars^.error,
								MaxCnt := 0, Delay := ptTestVars^.testTime);

	sTC_PASS: Pass := TRUE;
END_CASE
END_PROGRAM
